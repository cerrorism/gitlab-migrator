// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createGithubPullRequest = `-- name: CreateGithubPullRequest :one
INSERT INTO github_pull_request (github_repo_id, github_pr_id, gitlab_merge_request_id, status) VALUES ($1, $2, $3, $4) RETURNING id, github_repo_id, github_pr_id, gitlab_merge_request_id, status, created_at, updated_at
`

type CreateGithubPullRequestParams struct {
	GithubRepoID         int64
	GithubPrID           int64
	GitlabMergeRequestID pgtype.Int8
	Status               string
}

func (q *Queries) CreateGithubPullRequest(ctx context.Context, arg CreateGithubPullRequestParams) (GithubPullRequest, error) {
	row := q.db.QueryRow(ctx, createGithubPullRequest,
		arg.GithubRepoID,
		arg.GithubPrID,
		arg.GitlabMergeRequestID,
		arg.Status,
	)
	var i GithubPullRequest
	err := row.Scan(
		&i.ID,
		&i.GithubRepoID,
		&i.GithubPrID,
		&i.GitlabMergeRequestID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createGitlabMergeRequest = `-- name: CreateGitlabMergeRequest :one
INSERT INTO gitlab_merge_request (gitlab_project_id, gitlab_mr_iid, status) VALUES ($1, $2, $3) RETURNING id, gitlab_project_id, gitlab_mr_iid, status, created_at, updated_at
`

type CreateGitlabMergeRequestParams struct {
	GitlabProjectID int64
	GitlabMrIid     int64
	Status          string
}

func (q *Queries) CreateGitlabMergeRequest(ctx context.Context, arg CreateGitlabMergeRequestParams) (GitlabMergeRequest, error) {
	row := q.db.QueryRow(ctx, createGitlabMergeRequest, arg.GitlabProjectID, arg.GitlabMrIid, arg.Status)
	var i GitlabMergeRequest
	err := row.Scan(
		&i.ID,
		&i.GitlabProjectID,
		&i.GitlabMrIid,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getGitHubPullRequestViaGitLabMRID = `-- name: GetGitHubPullRequestViaGitLabMRID :many
SELECT id, github_repo_id, github_pr_id, gitlab_merge_request_id, status, created_at, updated_at FROM github_pull_request WHERE gitlab_merge_request_id = $1
`

func (q *Queries) GetGitHubPullRequestViaGitLabMRID(ctx context.Context, gitlabMergeRequestID pgtype.Int8) ([]GithubPullRequest, error) {
	rows, err := q.db.Query(ctx, getGitHubPullRequestViaGitLabMRID, gitlabMergeRequestID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GithubPullRequest
	for rows.Next() {
		var i GithubPullRequest
		if err := rows.Scan(
			&i.ID,
			&i.GithubRepoID,
			&i.GithubPrID,
			&i.GitlabMergeRequestID,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGithubRepo = `-- name: GetGithubRepo :one
SELECT id, name, description, created_at, updated_at FROM github_repo WHERE id = $1
`

func (q *Queries) GetGithubRepo(ctx context.Context, id int64) (GithubRepo, error) {
	row := q.db.QueryRow(ctx, getGithubRepo, id)
	var i GithubRepo
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getGitlabProject = `-- name: GetGitlabProject :one
SELECT id, name, description, created_at, updated_at FROM gitlab_project WHERE id = $1
`

func (q *Queries) GetGitlabProject(ctx context.Context, id int64) (GitlabProject, error) {
	row := q.db.QueryRow(ctx, getGitlabProject, id)
	var i GitlabProject
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUnknownMergeRequests = `-- name: GetUnknownMergeRequests :many
UPDATE gitlab_merge_request SET status='ongoing' WHERE id in (SELECT id, gitlab_project_id, gitlab_mr_iid, status, created_at, updated_at FROM gitlab_merge_request as gmr WHERE gmr.gitlab_project_id = $1 and status = 'unknown' order by id FOR UPDATE SKIP LOCKED limit 10) RETURNING id, gitlab_project_id, gitlab_mr_iid, status, created_at, updated_at
`

func (q *Queries) GetUnknownMergeRequests(ctx context.Context, gitlabProjectID int64) ([]GitlabMergeRequest, error) {
	rows, err := q.db.Query(ctx, getUnknownMergeRequests, gitlabProjectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GitlabMergeRequest
	for rows.Next() {
		var i GitlabMergeRequest
		if err := rows.Scan(
			&i.ID,
			&i.GitlabProjectID,
			&i.GitlabMrIid,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMergeRequestMigration = `-- name: UpdateMergeRequestMigration :exec
UPDATE gitlab_merge_request SET status = $1 WHERE id = $2
`

type UpdateMergeRequestMigrationParams struct {
	Status string
	ID     int64
}

func (q *Queries) UpdateMergeRequestMigration(ctx context.Context, arg UpdateMergeRequestMigrationParams) error {
	_, err := q.db.Exec(ctx, updateMergeRequestMigration, arg.Status, arg.ID)
	return err
}

const updateMergeRequestMigrationDone = `-- name: UpdateMergeRequestMigrationDone :exec
UPDATE gitlab_merge_request SET status = 'done' WHERE id = $1
`

func (q *Queries) UpdateMergeRequestMigrationDone(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, updateMergeRequestMigrationDone, id)
	return err
}

const updateMergeRequestMigrationFailed = `-- name: UpdateMergeRequestMigrationFailed :exec
UPDATE gitlab_merge_request SET status = 'failed' WHERE id = $1
`

func (q *Queries) UpdateMergeRequestMigrationFailed(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, updateMergeRequestMigrationFailed, id)
	return err
}

const updateMergeRequestMigrationSkipped = `-- name: UpdateMergeRequestMigrationSkipped :exec
UPDATE gitlab_merge_request SET status = 'skipped' WHERE id = $1
`

func (q *Queries) UpdateMergeRequestMigrationSkipped(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, updateMergeRequestMigrationSkipped, id)
	return err
}
